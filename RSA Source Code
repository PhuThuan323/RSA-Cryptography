#include <bits/stdc++.h>
using namespace std;

bool is_prime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return false;
    }
    return true;
}

int gcd(int a, int b) {
    while (b != 0) {
        int r = a % b;
        a = b;
        b = r;
    }
    return a;
}

// Thuật toán Euclide mở rộng để tìm d sao cho e*d ≡ 1 (mod phi)
int extended_gcd(int a, int b, int &x, int &y) {
    if (b == 0) {
        x = 1, y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extended_gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - (a / b) * y1;
    return gcd;
}

// Hàm tìm d sao cho e*d ≡ 1 mod phi
int mod_inverse(int e, int phi) {
    int x, y;
    int g = extended_gcd(e, phi, x, y);
    if (g != 1) return -1; // Không tìm thấy d
    return (x % phi + phi) % phi; // Đảm bảo d > 0
}

int main() {
    int p, q, e;
    cout << "Nhap hai so nguyen to p, q: ";
    cin >> p >> q;
    if (!is_prime(p) || !is_prime(q)) {
        cout << "ERROR: p hoac q khong phai la so nguyen to!" << endl;
        return 0;
    }
    long long n = (long long)p * q;
    long long phi = (p - 1) * (q - 1);
    cout << "Nhap e (1 < e < phi(n), nguyen to voi phi(n)): ";
    cin >> e;
    if (gcd(e, phi) != 1) {
        cout << "ERROR: e khong nguyen to voi phi(n)!" << endl;
        return 0;
    }

    int d = mod_inverse(e, phi);
    if (d == -1) {
        cout << "ERROR: Khong tim thay d!" << endl;
        return 0;
    }

    cout << "Khoa cong khai PU = (" << e << ", " << n << ")" << endl;
    cout << "Khoa rieng PR = (" << d << ", " << n << ")" << endl;

    return 0;
}
